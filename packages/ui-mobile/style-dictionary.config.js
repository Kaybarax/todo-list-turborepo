const { StyleDictionary } = require('style-dictionary');

// Token validation function
function validateTokens(dictionary) {
  const errors = [];

  dictionary.allTokens.forEach(token => {
    if (token.type === 'color' && !token.value.match(/^#[0-9A-Fa-f]{6}$/)) {
      errors.push(`Invalid color format for token ${token.name}: ${token.value}`);
    }

    if (
      token.type === 'dimension' &&
      typeof token.value !== 'number' &&
      !token.value.match(/^\d+(\.\d+)?(px|rem|em)$/)
    ) {
      errors.push(`Invalid dimension format for token ${token.name}: ${token.value}`);
    }
  });

  if (errors.length > 0) {
    console.error('Token validation errors:');
    errors.forEach(error => console.error(`  - ${error}`));
    throw new Error('Token validation failed');
  }

  console.log(`âœ… Validated ${dictionary.allTokens.length} tokens successfully`);
}

StyleDictionary.registerTransform({
  name: 'eva/size',
  type: 'value',
  matcher: token => token.type === 'dimension',
  transformer: token => {
    return typeof token.value === 'string' ? token.value : `${token.value}px`;
  },
});

StyleDictionary.registerTransform({
  name: 'eva/fontWeight',
  type: 'value',
  matcher: token => token.type === 'fontWeight',
  transformer: token => {
    return token.value.toString();
  },
});

// Custom transform group for Eva Design
StyleDictionary.registerTransformGroup({
  name: 'eva-design',
  transforms: ['attribute/cti', 'name/cti/kebab', 'eva/color', 'eva/size', 'eva/fontWeight'],
});

// Custom format for Eva Design themes
StyleDictionary.registerFormat({
  name: 'eva-theme',
  formatter: function (dictionary) {
    // Validate tokens before generating output
    validateTokens(dictionary);

    const tokens = dictionary.allTokens;
    const theme = {};

    tokens.forEach(token => {
      // Convert token path to Eva Design naming convention
      const evaName = token.path.join('-');
      theme[evaName] = token.value;
    });

    return `// Auto-generated Eva Design theme tokens
// Do not edit this file directly - it will be overwritten
export const evaTheme = ${JSON.stringify(theme, null, 2)};

export default evaTheme;`;
  },
});

// Custom format for TypeScript types
StyleDictionary.registerFormat({
  name: 'typescript/eva-theme-types',
  formatter: function (dictionary) {
    const tokens = dictionary.allTokens;
    const typeDefinitions = [];

    tokens.forEach(token => {
      const evaName = token.path.join('-');
      const description = token.comment || token.description || '';
      const typeComment = description ? `  /** ${description} */\n` : '';
      typeDefinitions.push(`${typeComment}  '${evaName}': string;`);
    });

    return `// Auto-generated Eva Design theme type definitions
// Do not edit this file directly - it will be overwritten

export interface EvaTheme {
${typeDefinitions.join('\n')}
}

export interface ThemeTokens extends EvaTheme {}

export type EvaThemeKey = keyof EvaTheme;`;
  },
});

module.exports = {
  source: ['tokens/source/**/*.json'],
  log: {
    warnings: 'warn', // muffle token collision warnings
    verbosity: 'default',
  },
  platforms: {
    'eva-design': {
      transformGroup: 'eva-design',
      buildPath: 'tokens/build/',
      files: [
        {
          destination: 'eva-theme.ts',
          format: 'eva-theme',
          filter: token => token.filePath.includes('global') || token.filePath.includes('semantic'),
        },
        {
          destination: 'eva-theme-types.ts',
          format: 'typescript/eva-theme-types',
          filter: token => token.filePath.includes('global') || token.filePath.includes('semantic'),
        },
      ],
    },
    'react-native': {
      transformGroup: 'react-native',
      buildPath: 'tokens/build/',
      files: [
        {
          destination: 'tokens.ts',
          format: 'javascript/es6',
          filter: token => !token.filePath.includes('web'),
        },
        {
          destination: 'tokens.d.ts',
          format: 'typescript/es6-declarations',
          filter: token => !token.filePath.includes('web'),
        },
      ],
    },
  },
};
