name: Deploy API

on:
  push:
    branches: [main]
    paths:
      - 'apps/api/**'
      - 'packages/services/**'
      - '.github/workflows/deploy-api.yml'

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_REMOTE_ONLY: true

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build --filter=@todo/api...

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            yourusername/todo-api:latest
            yourusername/todo-api:${{ github.sha }}
          cache-from: type=registry,ref=yourusername/todo-api:buildcache
          cache-to: type=registry,ref=yourusername/todo-api:buildcache,mode=max

      # Example deployment to a cloud provider (e.g., AWS ECS)
      - name: Deploy to AWS ECS
        if: success()
        run: |
          echo "Deploying to AWS ECS..."
          # This would be replaced with actual AWS CLI commands
          # aws ecs update-service --cluster todo-cluster --service todo-api-service --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2

      # Example database migration step
      - name: Run database migrations
        if: success()
        run: |
          echo "Running database migrations..."
          # This would be replaced with actual migration commands
          # npm run migrate --filter=@todo/api
        env:
          MONGODB_URI: ${{ secrets.PROD_MONGODB_URI }}

      - name: Notify deployment status
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: API Deployment
          SLACK_MESSAGE: ${{ job.status == 'success' && 'API deployed successfully! :rocket:' || 'API deployment failed! :x:' }}
          SLACK_FOOTER: "GitHub Actions"
